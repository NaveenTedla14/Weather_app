{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["require","config","console","log","process","App","useState","query","setQuery","weather","setWeather","getWeather","fetch","then","res","json","result","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","setInterval","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2MACAA,EAAQ,IAAUC,SAClBC,QAAQC,IAAIC,qMAuEGC,MAlEf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,KAYb,SAASC,IACTC,MAAM,GAAD,OAjBa,2CAiBb,qBAA4BL,EAA5B,+BAhBOH,qCAiBLS,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJN,EAAWM,GACXR,EAAS,IACTN,QAAQC,IAAIa,MAgBpB,OACE,qBAAKC,UAAmC,oBAAhBR,EAAQS,MAAyBT,EAAQS,KAAKC,KAAO,GAAM,WAA2B,WAA9G,SACE,iCACE,qBAAKF,UAAU,eAAf,SACE,uBACEG,KAAK,OACLH,UAAU,aACVI,YAAY,iBACZC,SAAU,SAAAC,GAAC,OAAIf,EAASe,EAAEC,OAAOC,QACjCA,MAAOlB,EACPmB,WAzCK,SAAAC,GACG,UAAZA,EAAIC,MACNjB,IAEAkB,YAAYlB,EAAW,WAwCI,oBAAhBF,EAAQS,KACjB,gCACE,sBAAKD,UAAU,iBAAf,UACE,sBAAKA,UAAU,WAAf,UAA2BR,EAAQqB,KAAnC,KAA2CrB,EAAQsB,IAAIC,WACvD,qBAAKf,UAAU,OAAf,SA7BU,SAACgB,GACnB,IAGIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EALS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAKzGL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAoBHE,CAAY,IAAIC,WAEzC,sBAAK1B,UAAU,gBAAf,UACE,sBAAKA,UAAU,OAAf,UACG2B,KAAKC,MAAMpC,EAAQS,KAAKC,MAD3B,WAGA,qBAAKF,UAAU,UAAf,SAA0BR,EAAQA,QAAQ,GAAGS,aAG5C,SCvDE4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnC,MAAK,YAAkD,IAA/CoC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ccae5099.chunk.js","sourcesContent":["import React, { useState } from 'react';\nrequire('dotenv').config();\nconsole.log(process.env)\nconst weather_URL = \"https://api.openweathermap.org/data/2.5/\";\nconst api_key=process.env.REACT_APP_API_KEY;\n\n// Function that displays weather on the webpage\nfunction App() {\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n  const search = evt => {\n    if (evt.key === \"Enter\") {\n      getWeather();\n      // automatically weather gets refreshed every 5 min \n      setInterval(getWeather,300000);\n    }\n   \n  }\n   // Fetches Weather data from OpenWeathermap.org using API\n  function getWeather(){\n  fetch(`${weather_URL}weather?q=${query}&units=metric&APPID=${api_key}`)\n        .then(res => res.json())\n        .then(result => {\n          setWeather(result);\n          setQuery('');\n          console.log(result);\n        })\n}\n  // Initialising DAY,DATE,MONTH,YEAR to be displayed\n  const dateBuilder = (d) => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n  }\n  // Displaying Search bar, Date, Location, Temperature,\n  return (\n    <div className={(typeof weather.main != \"undefined\") ? ((weather.main.temp > 16) ? 'app warm' : 'app cold') : 'app cold'}>\n      <main>\n        <div className=\"search-field\">\n          <input \n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Search... City\"\n            onChange={e => setQuery(e.target.value)}\n            value={query}\n            onKeyPress={search}\n          />\n        </div>\n        {(typeof weather.main != \"undefined\") ? (\n        <div>\n          <div className=\"location-field\">\n            <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n            <div className=\"date\">{dateBuilder(new Date())}</div>\n          </div>\n          <div className=\"weather-field\">\n            <div className=\"temp\">\n              {Math.round(weather.main.temp)}Â°c\n            </div>\n            <div className=\"weather\">{weather.weather[0].main}</div>\n          </div>\n        </div>\n        ) : ('')}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}